Readme for mapx library UTM update
Terry Haran 04/24/03

This document describes a set of changes to the mapx library implemented
in the course of adding the Transverse Mercator and Universal Transverse
Mercator projections and creating a set of unit tests. To date, none of
these changes have been added yet to the cvs repository.

In order to evaluate the changes, you should install the new version of
the library into some directory, leaving the old version of the library
intact. Assume that the new version of mapx is to be placed in a
directory called mapsnew. Then execute the following commands:

mkdir mapsnew
cd mapsnew
mkdir src
mkdir src/maps
mkdir bin
mkdir include
mkdir lib
mkdir lib/maps
cd src/maps
ftp sidads.colorado.edu
anonymous
<your email address>
cd pub/incoming/tharan/maps
bin
get mapsnew.tar.gz
quit
gunzip mapsnew.tar.gz
tar Uxvf mapsnew.tar
make allall

If you don't have the latest released version of mapx installed, you can
retrieve it from the same ftp directory as above in the file
mapsold.tar.gz. Note that the Makefile in the released version will
install the software into the src, lib, and include directories under your
home directory. Note also that the "allall" target doesn't exist in the
released Makefile. You'll have do "make all" to make the library, and then
individual makes of the individual applications and test programs.

The following changes were made to all .c and .h files:

1) <module>_rcsid character strings were added where missing.

2) Any <module>_RCSID identifies were changed to <module>_rcsid.

3) The function id_<module>() was added to all .c files. This function
   returns a pointer to the rcsid string. This was done in order to
   suppress warnings as well as provide a means for applications to
   retrieve version information.

4) The following files were not modified since they were provided from
   third parties:
   a) From the MODIS Reprojection Tool 3.1, gctp directory:
      i)   cproj.h
      ii)  isin.h
      iii) isinfor.c (formerly isinusfor.c)
      iv)  isininv.c (formerly isinusinv.c)
      v)   proj.h
   b) From the U.S. Naval Oceanographic Office:
      i) wdbpltc.c
   The compilations of the above .c files still produce warnings.

In addition to the changes mentioned in 1-4, the following changes were
also made:

5) ppgc.html:
   a) Added statement that keywords and their values are not case sensitive.
   b) Added the use of pound sign (#) to denote comments.
   c) Added statement that all text following a semi-colon or pound sign
      on a particular line is ignored.
   d) Provided expanded description of map eccentricity and radius.
   e) Added explanation that a negative value of eccentricity is used
      to specify eccentricity squared.
   f) Added keywords Map Origin X and Y.
   g) Modified keywords Map False Easting and Northing.
   k) Added keyword Map Center Scale.
   i) Fixed the spelling of Interrupted Homolosine Equal-Area. The
      mispelled form is still supported in the code.
   j) Added the following map projection names:
      i)   Polar Stereographic (ellipsoid)
      ii)  Transverse Mercator
      iii) Transverse Mercator (ellipsoid)
      iv)  Universal Transverse Mercator
   k) Added a separate table and explanation of map parameters for ISin:
      i)  Moved Map Isin Justify to separate ISin table.
      ii) Added Map Isin NZone parameter.
   l) Added a separate table and explanation of map parameters for UTM.

6) Makefile:
   a) Changed TOPDIR from HOME to ../.. (temporary changed to aid in
      evaluation).
   b) Changed INSTALL from cp to cp -f so that old files are overwritten.
   c) Removed -DLSB1ST from CONFIG_FLAGS. Linux users should add it back.
   d) Added transverse_mercator and universal_transverse_mercator to
      PROJECTION_SRCS and PROJECTION_OBJS, removed isinusfor and
      insinusiv from PROJECTION_SRCS and PROJECTION_OBJS, and removed
      isin.h from PROJECTION_HDRS. 
   e) Added targets:
      i)   allall
      ii)  appall
      iii) testall
      iv)  cleanall
      v)   cleanexes
   f) Under cdb_edit, changed "$(CP) cdb_edit.mpp $(MAPDIR)" to
      "$(INSTALL) cdb_edit.mpp $(MAPDIR)".
   g) Added build of xytest and gacct.
   h) Added $(INSTALL) for each test program.
   i) Changed name of tar file to mapsnew.tar.gz temporarily during
      testing.
   j) Created GCTP_SRCS and GCTP_OBJS containing isinfor, isininv, report,
      and cproj, and created GCTP_HDRS containing isin.h, cproj.h, and
      proj.h. All of these files are from the gctp directory in the
      MODIS Reprojection Tool version 3.1.
   k) In the "tar" build, included new directory UTEST, and the files
      UTEST/utest.pl, and UTEST/*.mpp.

7) The following changes were made to all projection .c files:
   a) For forward projection functions, the output parameters *u and *v were
      changed to *x and *y, respectively, and the following two lines of
      code:
	*u = current->T00*x + current->T01*y - current->u0;
	*v = current->T10*x + current->T11*y - current->v0;
      were replaced with:
	*x += current->false_easting;
	*y += current->false_northing;
      Note that "x" and "y" were changed from "double" to "float *".
   b) For inverse projection functions, the input parameters u and v were
      changed to x and y, respectively, and the following two lines of
      code:
        x =  current->T00*(u+current->u0) - current->T01*(v + current->v0);
        y = -current->T10*(u+current->u0) + current->T11*(v + current->v0);
      were replaced with
        x -= current->false_easting;
        y -= current->false_northing;
      Note that "x" and "y" were changed from double to float.
   c) Testing with macct indicates that these changes did degrade the
      accuracy somewhat, but it is still generally better than 1 meter.
      For example, for Azimuthal Equal Area:
      i)   macct N200correct.mpp:
	     Old: 
               102400 points,  0 bad points
               average error = 8.6325e-05 km
               std dev error = 1.3475e-04 km
               maximum error = 8.3848e-04 km
               max error was at 7.90N 37.81E
	     New:
               102400 points,  0 bad points
               average error = 1.1850e-04 km
               std dev error = 1.7604e-04 km
               maximum error = 9.7283e-04 km
               max error was at 1.41N 60.38W
   d) The accuracy of a few projections improved due to changing
      some temporary variables from float to double. For example,
      for Polar Stereographic Ellipsoid:
      i)   macct Sps.mpp:
             Old:
               102400 points,  0 bad points
               average error = 1.2009e-04 km
               std dev error = 1.8439e-04 km
               maximum error = 1.5249e-03 km
               max error was at 29.22S 157.43W
	     New:
               102400 points,  0 bad points
               average error = 5.5762e-05 km
               std dev error = 1.1409e-04 km
               maximum error = 7.8288e-04 km
               max error was at 55.55S 25.39W

8) albers_conic_equal_area.c:
   a) In inverse_albers_conic_equal_area() and 
      albers_conic_equal_area_ellipsoid(), in the calculation of theta,
      the arguments to atan2() are now negated when n is negative as
      specified in Snyder.
   b) In inverse_albers_conic_equal_area_ellipsoid(), the series equation
      3-18 from Snyder was replaced with the iterative solution based on
      equation 3-16 in Snyder. This improved the overall accuracy by about
      a factor of 20:
      i)   macct utest_albers_conic_equal_area_e00.mpp
             Old:
               102400 points,  336 bad points
               average error = 3.6677e-02 km
               std dev error = 9.4522e-02 km
               maximum error = 4.4933e+00 km
               max error was at 90.00S 124.70E
	     New:
	       102400 points,  0 bad points
	       average error = 8.7394e-04 km
	       std dev error = 3.8429e-03 km
	       maximum error = 1.8608e-01 km
	       max error was at 89.44S 52.48E

9) azimuthal_equal_area.c:
   a) In init_azimuthal_equal_area_ellipsoid(), an erroneous
      recalculation of qp was removed as well as redundant calculations
      of q1, cos_phi1, and sin_phi1.
   b) In azimuthal_equal_area_ellipsoid(), for the south polar case,
      a test of fabs(qp - q) was changed to fabs(qp + q) prior to the
      calculation of rho.
   c) In inverse_azimuthal_equal_area_ellipsoid(), the series equation
      3-18 from Snyder was replaced with the iterative solution based on
      equation 3-16 in Snyder. This improved the average accuracy for the
      north polar case by about a factor of 4 (the old oblique and south
      polar cases had bugs):
      i)   macct utest_azimuthal_equal_area_e01.mpp
	     Old:
               102400 points,  150 bad points
	       average error = 4.6800e-03 km
	       std dev error = 9.9562e-02 km
	       maximum error = 3.5940e+00 km
	       max error was at 90.00S 51.35W
	     New:
               102400 points,  0 bad points
	       average error = 1.1645e-03 km
	       std dev error = 5.0387e-03 km
	       maximum error = 2.0279e-01 km
	       max error was at 89.44S 14.11W

10) cdb.c:
   a) In init_cb(), added a typecast on line 134 to suppress a warning.

11) cdb_edit.c:
   a) In main(), removed declaration of unused variables "i", "ios", and
      "extent".
   b) In finish_new_file(), removed declaration of unused variable
      "command".

12) cdb_list.c:
    a) In main(), removed unused variable "i".

13) cylindrical_equal_area.c:
    a) In cylindrical_equal_area() and cylindrical_equal_area_ellipsoid(),
       changed "dlon" from float to double.
    b) In init_cylindrical_equal_area_ellipsoid(), changed use of
       current->lat0 (Reference Latitude) to current->lat1 (Second
       Reference Latitude) to match init_cylindrical_equal_area() as well
       as the documentation. Thus Reference Latitude is effectively ignored
       for both the spherical and ellipsoidal cylindrical equal area
       projections.

14) cylindrical_equidistant.c:
    a) In cylindrical_equidistant(), changed "dlon" from float to double.

15) grids.c:
    a) In gtest main(), changed "enter r s: " prompt to "enter col row: ".
    b) Added gacct, a grid accuracy test similar to macct, but for .gpd
       files rather than .mpp files. gacct tests the accuracy for each
       point in the grid.

16) integerized_sinusoidal.c:
    a) In init_integerized_sinusoidal(), replaced calculation of nrows
       with use of Map ISin NZone (isin_nzone) parameter value.
    b) In init_integerized_sinusoidal(), added passing of false easting
       and false northing values to Isin_inv_init().

17) keyval.c:
    a) In get_label_keyval(), added feature such that for each line,
       all lowercase characters are converted to uppercase, and any
       characters following a semi-colon or a pound sign are replaced
       with blanks.
    b) In get_field_keyval(), added feature such that keyword is
       converted to uppercase before the search is performed.
    c) In get_value_keyval(), added feature such that if default_string is
       "KEYVAL_UNINITIALIZED" and format is "%f" or "%lf", and the keyword
       is not found, then the value KEYVAL_UNINITIALIZED is returned.

18) keyval.h:
    a) Added definition of KEYVAL_UNINITIALIZED to be FLT_MAX, if FLT_MAX
       is defined, or 9e30 if it isn't.

19) lambert_conic_conformal.c:
    a) In init_lambert_conic_conformal_ellipsoid(), added use of Map
       Origin Latitude (center_lat) in addition to Map Reference Latitude
       (lat0) and Map Second Reference Latitude (lat1) as is done in
       init_albers_conic_equal_area().
    b) In inverse_lambert_conic_conformal_ellipsoid(), replaced lower
       accuracy series equation 3-5 from Snyder with higher accuracy
       iteration involving equation 7-9.

20) mapx.c:
    a) Added declarations of the following functions:
       i)   init_transverse_mercator()
       ii)  transverse_mercator()
       iii) inverse_transverse_mercator()
       iv)  init_transverse_mercator_ellipsoid()
       v)   transverse_mercator_ellipsoid()
       vi)  inverse_transverse_mercator_ellipsoid()
       vii) init_universal_transverse_mercator()
       Note that no forward or inverse functions for UTM are declared,
       since UTM uses transverse mercator forward and inverse functions.
     b) In new_mapx(), added initialization for Transverse Mercator and
        Universal Transverse Mercator.
     c) In decode_mpp():
        i)   Added code to make Map Reference Latitude and Longitude
             optional keywords for UTM and ISin.
        ii)  Added code to process Map Origin X and Y keywords. These
	     values are stored in x0 and y0 in the mapx structure.
        iii) Deferred assuming that Map Origin Latitude and Longitude
             take on Reference Latitude and Longitude values,
             respectively, when the former are not defined and the
             projection is UTM, until UTM initialization.
        iv)  Changed assignment of Map False Easting and Northing keyword
             values from u0, v0 to false_easting, false_northing,
             respectively, in the mapx structure.
	v)   Deferred assigning of default values to Map False Easting and
             Northing keywords when they are not defined and the
             projection is UTM until UTM initialization.
        vi)  Added code to process Map Center Scale, Map UTM Zone, and
             Map ISin NZone keywords.
	vii) Added code to assign default WGS-84 values for equatorial
             radius and eccentricity if map projection is UTM.
	viiI)Added code to assign default value for equatorial
             radius if map projection is ISin.
        ix)  Added code to interpret a negative eccentricity such that
             its absolute value specifies the square of the eccentricity.
	     This is the same scheme used by gctp.
     d) In old_fixed_format_decode_mpp():
        i)  Added code to set the default equatorial radius and
            eccentricity based on the map projection.
        ii) Added code to initialize the following new mpp parameters that
            are not supported by the old format:
              x0
              y0
	      false_easting
	      false_northing
	      center_scale
	      utm_zone
	      isin_nzone
	      isin_justify
     e) In reinit_mapx():
        i)   If Map Origin X and Y not provided, then forward transform
             Map Origin Latitude and Longitude (center_lat and center_lon
             in the mapx structure) into Map Origin X and Y (x0 and y0
             in the mapx structure).
        ii)  Changed the initialization of u0 and v0 in the mapx structure.
	     The old definitions of u0 and v0 were false easting and false
             northing, respectively. The new definition is the u and v values
	     resulting from the forward rotation (if any) of (x0,y0). Thus
             (x0,y0) serves as the center of the rotation.
     f) In forward_mapx():
        i)   Changed call to (*(this->geo_to_map))() so that pointers to
             temporary float variables x and y are passed rather than u and
             v. (x,y) is then rotated and translated to (u,v). Note there
             is now some loss of precision since x and y used to be doubles
	     in each forward projection function.
     g) In inverse_mapx():
        i)   Translate and rotate (u,v) to temporary floats (x,y). Note
             there is now some loss of precision since x and y used to be
             doubles in each inverse projection function. Changed call to
             (*(this->map_to_geo))() so that x and y are passed rather than
             u and v.
     h) Added forward_xy_mapx() which converts (lat,lon) to (x,y).
     i) Added inverse_xy_mapx() which converts (x,y) to (lat,lon).
     j) In standard_name():
	i)   Added support for correct spelling of "interrupted" for
	     Goode Interrupted Homolosine Equal Area. Incorrect spelling
             is still supported.
	ii)  Added Transverse Mercator.
	iii) Added Transverse Mercator Ellipsoid.
	iv)  Added Universal Transverse Mercator.
             Note that Universal Transverse Mercator Ellipsoid is mapped
             to Universal Transverse Mercator.
     k) Added main program xytest, an interactive test for mapx routines
        that is similar to mtest, but works with original map coordinates
        (x,y) rather than rotated and translated coordinates (u,v).
     l) In mtest:
        i)   Changed declaration of readln[80] to readln[FILENAME_MAX].
	ii)  Added ability to specify the .mpp file name on the command
             line just as in gtest.

21) mapx.h:
    a) Added definitions of WGS-84 equatorial radius and eccentricity.
    b) Added definition of default sphere radius for ISin.
    c) Added user specified constants:
       i)   x0
       ii)  y0
       iii) false_easting
       iv)  false_northing
       v)   center_scale
       vi)  utm_zone
       vii) isin_nzone
       viii)isin_justify
    d) Added private projection constants:
       i)    t2
       ii)   e0
       iii)  e1p
       iv)   e2p
       v)    e3p
       vi)   ml0
       vii)  esp
       viii) f1
       ix)   f2
       x)    f3
       xi)   f4
    e) Added function prototypes:
       i)   forward_xy_mapx()
       ii)  inverse_xy_mapx()

22) mercator.c:
    a) In mercator(), changed "dlon" from float to double.

23) mollweide.c:
    a) In mollweide(), changed "dlon" from float to double.
    b) In mollweide(), changed the value of epsilon from 0.0025 to 1e-6.
       This improved the average accuracy by about a factor of 4:
       i)   macct utest_mollweide_s00.mpp
              Old:
	        102400 points,  0 bad points
		average error = 1.4197e-03 km
		std dev error = 3.0140e-03 km
		maximum error = 1.5307e-02 km
		max error was at 89.44S 89.72E
	      New:
	        102400 points,  0 bad points
		average error = 3.2168e-04 km
		std dev error = 1.1635e-03 km
		maximum error = 1.4431e-02 km
		max error was at 90.00S 89.72W

24) orthographic.c:
    a) In orthographic(), changed the following temporary variables
       from float to double:
       i)   phi
       ii)  lam
       iii) sin_phi
       iv)  cos_phi
       v)   sin_lam
       vi)  cos_lam
       vii) cos_beta

25) polar_stereographic.c:
    a) In polar_stereographic(), changed the following temporary variables
       from float to double:
       i)   phi
       ii)  lam
       iii) rho
    b) In inverse_polar_stereographic(), fixed a bug by negating sin(phi)
       in the calculation of q for the south polar aspect.
    c) In init_polar_stereographic_ellipsoid(), changed the following
       temporary variables from float to double:
       i)   numerator
       ii)  denominator
    d) In polar_stereographic_ellipsoid(), changed the following
       temporary variables from float to double:
       i)   phi
       ii)  lam
       iii) rho
       iv)  t
       v)   numerator
       vi)  denominator
    e) Also in polar_stereographic_ellipsoid(), changed the use of
       equation 15-9 to 15-9a.

26) sinusoidal.c:
    a) In sinusoidal(), changed "dlon" from float to double.

27) Added transverse_mercator.c.

28) Added universal_transverse_mercator.c.

29) Added UTEST directory containing utest.pl and several utest*.mpp
    files.
    a) In the UTEST directory, typing utest.pl produces:

USAGE: utest.pl [-v] mppfile1 [mppfile2...]

   input:
       mppfile - Map Projection Parameters file to be used as input to
                 macct and xytest to test a particular map projection.
                 One test of macct to be performed must consist of a group
                 of six lines in mppfile of the form:
                   # macct
                   # <points> points,  <bad_points> bad points
                   # average error = <average_error> km
                   # std dev error = <std_dev_error> km
                   # maximum error = <max_error> km
                   # max error was at <max_err_lat> <max_err_lon>
                 Each test of xytest to be performed must consist of a group
                 of three lines in mppfile (following the macct group, if any)
                 of the form:
                   # forward
                   # lat,lon = <lat_in> <lon_in>
                   # x,y = <x_expected> <y_expected> <comment>
                 or
                   # inverse
                   # x,y = <x_in> <y_in>
                   # lat,lon = <lat_expected> <lon_expected> <comment>

   options:
       -v - verbose

    b) Also in the UTEST directory are utest*.mpp files which contain
       "unit test" expected results to be used with utest.pl. Current
       utest*.mpp files have names of the form:

         utest_<projection>_<s|e><nn>.mpp
	   where
	     <projection> is the name of the map projection to be tested.
	     <s|e> is s for spherical projections,
                      e for ellipsoidal projections.
             <nn> is a two-digit serial number. 00 is used to indicate
                  tests that correspond to a numerical example in Snyder.
                  Not all projections have a numerical example in Snyder
		  (e.g. cylindrical equidistant).

       This naming convention is not required by utest.pl.

    c) As an example, here is utest_albers_conic_equal_area_e00.mpp:

# Map Projections--A Working Manual, John P. Snyder
# Appendix A Numerical Examples
# Albers Conical Equal-Area Ellipsoid pp. 292-294
#
Map Projection:                 Albers Conic Equal-Area Ellipsoid
Map Equatorial Radius:          6378206.4
Map Eccentricity:               0.0822719
Map Reference Latitude:         29.5
Map Second Reference Latitude:  45.5
Map Origin Latitude:            23.0
Map Reference Longitude:        -96.0
#
# macct
#   102400 points,  0 bad points
#   average error = 8.7394e-04 km
#   std dev error = 3.8429e-03 km
#   maximum error = 1.8608e-01 km
#   max error was at 89.44S 52.48E
#
# forward
#   lat,lon = 35.0 -75.0
#   x,y = 1885472.7500000 1535925.0000000 vs. 1885472.7       1535925.0 in Snyder
#
# inverse
#   x,y = 1885472.7 1535925.0
#   lat,lon = 35.0000000 -75.0000000 vs. 35.0000015 -75.0000003 in Snyder

    d) To run the unit tests for all the utest*.mpp files, cd to UTEST
       and type:

         utest.pl utest*.mpp

       By default, the only output produced is for actual results that
       don't match expected results. Note that expected results are not
       necessarily the same as those in Snyder, but they're all very
       close.

    e) To see produce output regardless of the results, use the -v option.
       For example, typing:

         utest.pl -v utest_albers_conic_equal_area_e00.mpp

       produces:

****************************************************************
mppfile: utest_albers_conic_equal_area_e00.mpp
  Map Projection:                 Albers Conic Equal-Area Ellipsoid
  Map Equatorial Radius:          6378206.4
  Map Eccentricity:               0.0822719
  Map Reference Latitude:         29.5
  Map Second Reference Latitude:  45.5
  Map Origin Latitude:            23.0
  Map Reference Longitude:        -96.0
  **************************************************************
  macct expected results:
    102400 points,  0 bad points
    average error = 8.7394e-04 km
    std dev error = 3.8429e-03 km
    maximum error = 1.8608e-01 km
    max error was at 89.44S 52.48E
  macct actual results:
    102400 points,  0 bad points
    average error = 8.7394e-04 km
    std dev error = 3.8429e-03 km
    maximum error = 1.8608e-01 km
    max error was at 89.44S 52.48E
  Expected results match actual results
  **************************************************************
  xytest forward results:
    lat,lon in:       35.0 -75.0
    x,y expected:     1885472.7500000 1535925.0000000
                  vs. 1885472.7       1535925.0 in Snyder
    x,y actual:       1885472.7500000 1535925.0000000
  Expected results match actual results
  **************************************************************
  xytest inverse results:
    x,y in:           1885472.7 1535925.0
    lat,lon expected: 35.0000000 -75.0000000
                  vs. 35.0000015 -75.0000003 in Snyder
    lat,lon actual:   35.0000000 -75.0000000
  Expected results match actual results
****************************************************************

    f) Typing:

         grep average utest*.mpp

       produces:

utest_albers_conic_equal_area_e00.mpp:#   average error = 8.7394e-04 km
utest_albers_conic_equal_area_e01.mpp:#   average error = 9.2418e-04 km
utest_albers_conic_equal_area_s00.mpp:#   average error = 5.9359e-03 km
utest_albers_conic_equal_area_s01.mpp:#   average error = 5.6677e-03 km
utest_azimuthal_equal_area_e00.mpp:#   average error = 3.6016e-04 km
utest_azimuthal_equal_area_e01.mpp:#   average error = 1.1645e-03 km
utest_azimuthal_equal_area_e02.mpp:#   average error = 4.2699e-04 km
utest_azimuthal_equal_area_e03.mpp:#   average error = 1.2262e-03 km
utest_azimuthal_equal_area_s00.mpp:#   average error = 5.1295e-03 km
utest_cylindrical_equal_area_e00.mpp:#   average error = 9.1734e-03 km
utest_cylindrical_equal_area_s00.mpp:#   average error = 8.1742e-03 km
utest_cylindrical_equidistant_s01.mpp:#   average error = 2.2924e-05 km
utest_homolosine_s01.mpp:#   average error = 3.7073e-04 km
utest_integerized_sinusoidal_s01.mpp:#   average error = 1.1599e-04 km
utest_lambert_conic_conformal_e00.mpp:#   average error = 1.1262e-04 km
utest_lambert_conic_conformal_e01.mpp:#   average error = 1.9469e-04 km
utest_mercator_s00.mpp:#   average error = 1.8420e-04 km
utest_mollweide_s00.mpp:#   average error = 3.2168e-04 km
utest_orthographic_s00.mpp:#   average error = 1.0413e-03 km
utest_polar_stereographic_e00.mpp:#   average error = 7.9947e-05 km
utest_polar_stereographic_e01.mpp:#   average error = 1.7042e-04 km
utest_polar_stereographic_s01.mpp:#   average error = 7.7328e-05 km
utest_polar_stereographic_s02.mpp:#   average error = 1.6675e-04 km
utest_sinusoidal_s00.mpp:#   average error = 1.9859e-04 km
utest_sinusoidal_s01.mpp:#   average error = 1.9859e-04 km
utest_transverse_mercator_e00.mpp:#   average error = 4.3851e+03 km
utest_transverse_mercator_e01.mpp:#   average error = 4.3850e+03 km
utest_transverse_mercator_s00.mpp:#   average error = 1.4980e-04 km
utest_universal_transverse_mercator_e01.mpp:#   average error = 4.3851e+03 km

       Note that the average error is less than 10 m for all projections
       except transverse mercator ellipsoid and universal transverse
       mercator; their high average errors are apparently due to the
       use of series approximations that are very accurate "close" (i.e.
       within about +- 10 degrees) to the central meridian, but then become
       highly inaccurate farther away.

    g) The utest*.mpp files produced to date do not necessarily exercise
       all the paths through the code for each projection. More files
       could be added to do this.
